<?php

/**
 * @file
 * IndieWeb install file.
 */

define('INDIEWEB_MODULE_WEIGHT', 10);

/**
 * Implements hook_requirements().
 */
function indieweb_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {

    $directory = 'public://micropub';
    if (!is_dir($directory)) {
      file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    }

    if (!is_dir($directory)) {
      if ($phase == 'runtime') {
        $description = t('An automated attempt to create the directory %directory failed, possibly due to a permissions problem. To proceed with the installation, either create the directory and modify its permissions manually or ensure that the installer has the permissions to create it automatically. For more information, see INSTALL.txt or the <a href=":handbook_url">online handbook</a>.', ['%directory' => $directory, ':handbook_url' => 'https://www.drupal.org/server-permissions']);
      }
      else {
        $description = t('The directory %directory does not exist.', ['%directory' => $directory]);
      }
      $requirements['micropub directory'] = [
        'title' => t('Micropub directory'),
        'description' => $description,
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function indieweb_schema() {
  $schema = [];

  $schema['webmention_syndication'] = [
    'description' => 'Stores the syndicated urls when a webmention is send.',
    'fields' => [
      'id' => array(
        'description' => 'The primary identifier for a syndication.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity_id' => [
        'description' => 'The id to which the syndication belongs.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'entity_type_id' => [
        'description' => 'The entity type id.',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ],
      'url' => [
        'description' => 'The syndication url.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'entity_id__entity_type_id' => ['entity_id', 'entity_type_id']
    ],
  ];

  $schema['indieweb_post_context'] = [
    'description' => 'Stores the context for a post.',
    'fields' => [
      'id' => array(
        'description' => 'The primary identifier for a context.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity_id' => [
        'description' => 'The id to which the context belongs.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'entity_type_id' => [
        'description' => 'The entity type id.',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ],
      'url' => [
        'description' => 'The external post url.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'content' => [
        'description' => 'The context content, stored as mf2 json.',
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'entity_id__entity_type_id' => ['entity_id', 'entity_type_id']
    ],
  ];

  $schema['webmention_send'] = [
    'description' => 'Stores the (send) webmentions.',
    'fields' => [
      'id' => array(
        'description' => 'The primary identifier for a send webmention.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'source' => [
        'description' => 'The source url.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'target' => [
        'description' => 'The source url.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'entity_id' => [
        'description' => 'The id to which the webmention belongs.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'entity_type_id' => [
        'description' => 'The entity type id.',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ],
      'created' => [
        'description' => 'The timestamp of the item.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'entity_id__entity_type_id' => ['entity_id', 'entity_type_id']
    ],
  ];

  $schema['indieweb_feed_item'] = [
    'description' => 'Stores items for the feeds.',
    'fields' => [
      'id' => array(
        'description' => 'The primary identifier for a feed item.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity_id' => [
        'description' => 'The id to which the feed belongs.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'entity_type_id' => [
        'description' => 'The entity type id.',
        'type' => 'varchar',
        'length' => 40,
        'not null' => TRUE,
        'default' => '',
      ],
      'published' => [
        'description' => 'Boolean indicating whether the item is published.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'timestamp' => [
        'description' => 'The timestamp of the item.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'feed' => [
        'description' => 'The id of the feed.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'entity_id__entity_type_id' => ['entity_id', 'entity_type_id'],
      'feed' => ['feed'],
      'timestamp' => ['timestamp'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function indieweb_install() {
  module_set_weight('indieweb', INDIEWEB_MODULE_WEIGHT);
}

/**
 * Sets the module weight of indieweb to 10.
 */
function indieweb_update_8001() {
  module_set_weight('indieweb', INDIEWEB_MODULE_WEIGHT);
}

/**
 * Installs the {webmention_syndication} table.
 */
function indieweb_update_8002() {
  if (!\Drupal::database()->schema()->tableExists('webmention_syndication')) {
    $schema = indieweb_schema();
    \Drupal::database()->schema()->createTable('webmention_syndication', $schema['webmention_syndication']);
  }
}

/**
 * Adds the id field and primary key to {webmention_syndication} table.
 */
function indieweb_update_8003() {
  if (!\Drupal::database()->schema()->fieldExists('webmention_syndication', 'id')) {
    $schema = indieweb_schema();
    // In  case people already had syndications, keep old records.
    $syndications = \Drupal::database()->query('SELECT * FROM {webmention_syndication}')->fetchAll();
    // Just do drop and recreate.
    \Drupal::database()->schema()->dropTable('webmention_syndication');
    \Drupal::database()->schema()->createTable('webmention_syndication', $schema['webmention_syndication']);
    if (!empty($syndications)) {
      foreach ($syndications as $syndication) {
        \Drupal::database()
          ->insert('webmention_syndication')
          ->fields((array) $syndication)
          ->execute();
      }
    }
  }
}

/**
 * Installs the {indieweb_feed_item} table.
 */
function indieweb_update_8004() {
  if (!\Drupal::database()->schema()->tableExists('indieweb_feed_item')) {
    $schema = indieweb_schema();
    \Drupal::database()->schema()->createTable('indieweb_feed_item', $schema['indieweb_feed_item']);
  }
}

/**
 * Installs the {webmention_send} table.
 */
function indieweb_update_8005() {
  if (!\Drupal::database()->schema()->tableExists('webmention_send')) {
    $schema = indieweb_schema();
    \Drupal::database()->schema()->createTable('webmention_send', $schema['webmention_send']);
  }
}

/**
 * Migrates indieweb.publish to indieweb.webmention.
 */
function indieweb_update_8006() {
  $fields = [
    'channels' => 'syndication_targets',
    'back_link' => 'bridgy_back_link',
    'publish_send_webmention_by' => 'send_webmention_handler',
    'publish_custom_url' => 'send_custom_url',
    'publish_link_fields' => 'send_link_fields',
    'publish_log_response' => 'send_log_response',
    'publish_comment_webmention_field' => 'send_comment_webmention_field',
    'publish_comment_permission_fields' => 'send_comment_permission_fields',
  ];

  $publish = \Drupal::configFactory()->getEditable('indieweb.publish');
  $webmention = \Drupal::configFactory()->getEditable('indieweb.webmention');
  foreach ($fields as $key => $target) {
    $value = $publish->get($key);
    $webmention->set($target, $value);
  }
  $webmention->save();
  $publish->delete();
}

/**
 * Removes 'micropub_me' entry.
 */
function indieweb_update_8007() {
  $micropub = \Drupal::configFactory()->getEditable('indieweb.micropub');
  $micropub->clear('micropub_me');
  $micropub->save();
}

/**
 * Cleans the microsub entries.
 */
function indieweb_update_8008() {
  $micropub = \Drupal::configFactory()->getEditable('indieweb.microsub');
  $micropub->clear('enable');
  $micropub->save();
}

/**
 * Installs the {indieweb_post_context} table.
 */
function indieweb_update_8009() {
  if (!\Drupal::database()->schema()->tableExists('indieweb_post_context')) {
    $schema = indieweb_schema();
    \Drupal::database()->schema()->createTable('indieweb_post_context', $schema['indieweb_post_context']);
  }
}
