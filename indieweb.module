<?php

/**
 * @file
 * Indieweb functionality.
 */

use Drupal\comment\Entity\Comment;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\indieweb\Entity\WebmentionEntityInterface;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use IndieWeb\MentionClient;

/**
 * Implements hook_page_attachments_alter().
 */
function indieweb_page_attachments_alter(array &$attachments) {

  // Add webmention and pingback rel links.
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);
  if (!$is_admin) {

    $config = \Drupal::config('indieweb.webmention');
    if ($config->get('webmention_enable') && ($end_point = $config->get('webmention_endpoint'))) {
      $link = [
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'webmention',
          'href' => $end_point,
        ],
      ];
      $attachments['#attached']['html_head'][] = [$link, 'webmention'];
    }

    if ($config->get('pingback_enable') && ($end_point = $config->get('pingback_endpoint'))) {
      $link = [
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'pingback',
          'href' => $end_point,
        ],
      ];
      $attachments['#attached']['html_head'][] = [$link, 'pingback'];
    }
  }

  if (\Drupal::service('path.matcher')->isFrontPage()) {

    // IndieAuth Authentication endpoints.
    if (($config = \Drupal::config('indieweb.indieauth')) && ($config->get('enable')) && ($config->get('expose'))) {

      if ($end_point = $config->get('authorization_endpoint')) {
        $link = [
          '#tag' => 'link',
          '#attributes' => [
            'rel' => 'authorization_endpoint',
            'href' => $end_point,
          ],
        ];
        $attachments['#attached']['html_head'][] = [
          $link,
          'authorization_endpoint'
        ];
      }

      if ($end_point = $config->get('token_endpoint')) {
        $link = [
          '#tag' => 'link',
          '#attributes' => [
            'rel' => 'token_endpoint',
            'href' => $end_point,
          ],
        ];
        $attachments['#attached']['html_head'][] = [
          $link,
          'token_endpoint'
        ];
      }
    }

    // Micropub.
    if (($config = \Drupal::config('indieweb.micropub')) && ($config->get('micropub_enable')) && $config->get('micropub_add_header_link')) {

      $link = [
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'micropub',
          'href' => Url::fromRoute('indieweb.micropub.endpoint', [], ['absolute' => TRUE])->toString(),
        ],
      ];

      $attachments['#attached']['html_head'][] = [
        $link,
        'micropub_endpoint'
      ];
    }

    // Microsub.
    if (($config = \Drupal::config('indieweb.microsub')) && $config->get('enable')) {

      $link = [
        '#tag' => 'link',
        '#attributes' => [
          'rel' => 'microsub',
          'href' => $config->get('microsub_endpoint'),
        ],
      ];

      $attachments['#attached']['html_head'][] = [
        $link,
        'microsub_endpoint'
      ];
    }

  }

}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Adds indieweb functionality to node forms.
 */
function indieweb_form_node_form_alter(&$form, FormStateInterface $form_state) {

  // TODO configure per node type / entity type
  $node = $form_state->getFormObject()->getEntity();
  if ($node) {

    $channels = indieweb_get_publishing_channels();
    if (!empty($channels)) {

      $form['indieweb'] = [
        '#type' => 'details',
        '#title' => t('Publish to'),
        '#access' => \Drupal::currentUser()->hasPermission('send webmentions'),
        '#group' => 'advanced',
        '#weight' => 100,
      ];

      $form['indieweb']['indieweb_publish_channels'] = [
        '#type' => 'checkboxes',
        '#options' => indieweb_get_publishing_channels(),
        '#default_value' => [],
      ];

      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'indieweb_form_node_form_submit';
        }
      }
    }
  }

}

/**
 * Form submission handler for indieweb.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @see indieweb_form_node_form_alter()
 */
function indieweb_form_node_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  if ($node->isPublished()) {

    $source_url = $node->toUrl()->setAbsolute(TRUE)->toString();
    $publish_to = $form_state->getValue('indieweb_publish_channels');
    if (!empty($publish_to)) {
      foreach ($publish_to as $key => $value) {
        if ($key === $value) {
          indieweb_publish_create_queue_item($source_url, $key, $node->id(), 'node');
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() to remove syndications.
 */
function indieweb_entity_delete(EntityInterface $entity) {
  \Drupal::database()
    ->delete('webmention_syndication')
    ->condition('entity_id', $entity->id())
    ->condition('entity_type_id', $entity->getEntityTypeId())
    ->execute();
}

/**
 * Implements hook_preprocess_node().
 */
function indieweb_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'full' || $variables['view_mode'] == 'teaser' || $variables['view_mode'] == 'indieweb_microformat') {

    if (\Drupal::config('indieweb.microformats')->get('h_entry')) {
      $variables['attributes']['class'][] = 'h-entry';
    }

    if (\Drupal::config('indieweb.microformats')->get('post_metadata')) {
      $date = \Drupal::service('date.formatter')->format($variables['node']->getCreatedTime(), 'custom', 'c');

      if ($variables['node']->bundle() != 'note') {
        $metadata = '<span class="hidden">
          <a href="' . $variables['node']->toUrl('canonical', ['absolute' => TRUE])->toString() . '" class="u-url">
            <span class="p-name">' . $variables['node']->getTitle() . '</span>
            <span class="dt-published">' . $date . '</span>
          </a>
        </span>';
      }
      else {
        $metadata = '<span class="hidden">
          <a href="' . $variables['node']->toUrl('canonical', ['absolute' => TRUE])->toString() . '" class="u-url">
            <span class="dt-published">' . $date . '</span>
          </a>
        </span>';
      }
      /**
       * Rdf module might have set this and already rendered it as a string so
       * make sure we don't overwrite something.
       *
       * @see rdf_preprocess_node().
       */
      if (isset($variables['metadata'])) {
        $variables['metadata'] .= $metadata;
      }
      else {
        $variables['metadata'] = ['#markup' => $metadata];
      }
    }
  }

}

/**
 * Implements hook_preprocess_field().
 */
function indieweb_preprocess_field(&$variables) {

  // Put e-content on body.
  if ($variables['field_name'] == 'body' && \Drupal::config('indieweb.microformats')->get('e_content')) {
    $variables['attributes']['class'][] = 'e-content';

    // Check p-bridgy-twitter-content class. In case there is no summary field
    // on this entity or the field is empty, then add it.
    if (\Drupal::config('indieweb.microformats')->get('p_bridgy_twitter_content')) {

      $add = TRUE;
      /** @var \Drupal\Core\Entity\EntityInterface $entity */
      $entity = $variables['element']['#object'];
      $summary_fields = indieweb_get_summary_fields();
      foreach ($summary_fields as $field) {
        if ($entity->hasField($field) && $entity->get($field)->getValue()) {
          $add = FALSE;
        }
      }

      if ($add) {
        $variables['attributes']['class'][] = 'p-bridgy-twitter-content';
      }
    }

  }

  // In case there's a p-summary.
  if (in_array($variables['field_name'], indieweb_get_summary_fields())) {
    $variables['attributes']['class'][] = 'p-summary';

    if (\Drupal::config('indieweb.microformats')->get('p_bridgy_twitter_content')) {
      $variables['attributes']['class'][] = 'p-bridgy-twitter-content';
    }
  }

}

/**
 * Implements hook_preprocess_image_style().
 *
 * @param $variables
 */
function indieweb_preprocess_image_style(&$variables) {
  if (\Drupal::config('indieweb.microformats')->get('u_photo')) {
    $variables['image']['#attributes']['class'][] = 'u-photo';
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function indieweb_entity_extra_field_info() {
  $extra = [];

  $channels = indieweb_get_publishing_channels();
  if (!empty($channels)) {
    foreach (NodeType::loadMultiple() as $bundle) {

      // Channel fields.
      foreach ($channels as $url => $name) {
        $machine_name = indieweb_get_machine_name_from_url($url);
        $extra['node'][$bundle->id()]['display'][$machine_name] = [
          'label' => $name,
          'weight' => 0,
          'visible' => FALSE,
        ];
      }

      // Syndication field.
      $extra['node'][$bundle->id()]['display']['indieweb_syndication'] = [
        'label' => t('Syndication'),
        'weight' => 0,
        'visible' => FALSE,
      ];

    }
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function indieweb_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display) {

  // Channel fields.
  $channels = indieweb_get_publishing_channels();
  if (!empty($channels)) {
    foreach ($channels as $url => $name) {
      $machine_name = indieweb_get_machine_name_from_url($url);
      if ($display->getComponent($machine_name)) {
        $build[$machine_name] = [
          '#markup' => '<span class="hidden"><a href="' . $url . '"></a></span>',
        ];
      }
    }
  }

  // Syndication field.
  if ($display->getComponent('indieweb_syndication')) {
    $syndications = indieweb_get_syndications($node->id(), 'node');
    if ($syndications) {
      $items = [];

      foreach ($syndications as $url) {
        $items[] = [
          '#type' => 'link',
          '#url' => Url::fromUri($url),
          '#title' => $url,
          '#attributes' => [
            'class' => ['u-syndication']
          ]
        ];
      }

      $build['indieweb_syndication'] = [
        '#theme' => 'item_list',
        '#items' => $items,
        '#title' => t('Syndications'),
      ];
    }
  }

}

/**
 * Implements hook_form_FORM_BASE_ID_alter() for the comments form.
 */
function indieweb_form_comment_form_alter(&$form, FormStateInterface $form_state) {
  // Check the comment webmention reference field.
  $config = \Drupal::config('indieweb.comment');
  if ($config->get('comment_create_enable') && ($reference_field = $config->get('comment_create_webmention_reference_field'))) {
    if (isset($form[$reference_field]) && isset($form['comment_body'])) {
      /** @var \Drupal\comment\CommentInterface $comment */
      $comment = $form_state->getFormObject()->getEntity();
      // Deny access to comment form if webmention is referenced and body is
      // empty. Otherwise, you can not save this comment anymore.
      if (!$comment->isNew() && !empty($comment->get($reference_field)->target_id) && empty($comment->get('comment_body')->value)) {
        $form['comment_body']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function indieweb_webmention_entity_insert(WebmentionEntityInterface $webmention) {

  // Comment creation.
  if (($config = \Drupal::config('indieweb.comment')) && $config->get('comment_create_enable')) {

    // TODO we can probably remove the config checks underneath by adding
    // validation on the configuration screen. If everything is fine, then
    // comment is enabled and the if statement above is enough. webmention
    // check needs to stay of course.
    if (
    !empty($config->get('comment_create_comment_type')) &&
    !empty($config->get('comment_create_webmention_reference_field')) &&
    !empty($config->get('comment_create_node_comment_field')) &&
    $webmention->get('property')->value == 'in-reply-to' &&
    !empty($webmention->get('content_text')->value)) {

      // TODO - we have the same code in WebmentionController::clearCache to get
      // an entity make a helper function/method.
      $path = \Drupal::service('path.alias_manager')->getPathByAlias($webmention->get('target')->value);
      try {
        $params = Url::fromUri("internal:" . $path)->getRouteParameters();
        if (!empty($params) && key($params) == 'node') {
          $entity_type = key($params);

          $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
          if ($storage) {

            $comment_type = $config->get('comment_create_comment_type');
            $comment_comment_webmention_field_name = $config->get('comment_create_webmention_reference_field');
            $comment_node_comment_field_name = $config->get('comment_create_node_comment_field');

            /** @var \Drupal\node\NodeInterface $node */
            $node = $storage->load($params[$entity_type]);
            if ($node && $node->hasField($comment_node_comment_field_name) && $node->{$comment_node_comment_field_name}->status == 2) {

              $subject = 'Auto created comment from webmention';

              $values = [
                'subject' => $subject,
                'status' => $config->get('comment_create_default_status'),
                'entity_id' => $node->id(),
                'entity_type' => 'node',
                'comment_type' => $comment_type,
                'field_name' => $comment_node_comment_field_name,
                $comment_comment_webmention_field_name => [
                  'target_id' => $webmention->id(),
                ]
              ];

              // Match authors if possible.
              $authors = Settings::get('indieweb_comment_authors', []);
              $author_name = $webmention->get('author_name')->value;
              $values['name'] = $author_name;
              if (isset($authors[$author_name])) {
                $values['uid'] = $authors[$author_name];
              }

              $comment = Comment::create($values);
              $comment->save();

            }
          }
        }
      }
      catch (Exception $e) {
        \Drupal::logger('indieweb_comment')->notice('Failed to create a comment: @message', ['@message' => $e->getMessage()]);
      }
    }

  }

}

/**
 * Implements hook_cron().
 */
function indieweb_cron() {
  if (\Drupal::config('indieweb.publish')->get('publish_send_webmention_by') == 'cron') {
    indieweb_handle_publish_queue();
  }
}

/**
 * Get the syndications for an entity.
 *
 * @param $entity_id
 * @param $entity_type_id
 *
 * @return array
 */
function indieweb_get_syndications($entity_id, $entity_type_id) {
  $syndications = [];

  $records = \Drupal::database()->query('SELECT url FROM {webmention_syndication} WHERE entity_id = :entity_id AND entity_type_id = :entity_type_id', [':entity_id' => $entity_id, ':entity_type_id' => $entity_type_id]);
  foreach ($records as $record) {
    $syndications[] = $record->url;
  }

  return $syndications;
}

/**
 * Returns the publishing channels.
 *
 * @return array
 */
function indieweb_get_publishing_channels() {
  $channels = [];
  $config = \Drupal::config('indieweb.publish')->get('channels');
  if (!empty($config)) {
    $lines = explode("\n", $config);
    foreach ($lines as $line) {
      $line = trim($line);
      if (!empty($line)) {
        $name_url = explode('|', $line);
        if (!empty($name_url[0]) && !empty($name_url[1])) {
          $channels[$name_url[1]] = $name_url[0];
        }
      }
    }
  }

  return $channels;
}

/**
 * Creates a publish queue item.
 *
 * @param $source_url
 * @param $target_url
 * @param $entity_id
 * @param $entity_type_id
 *
 * @throws \Exception
 */
function indieweb_publish_create_queue_item($source_url, $target_url, $entity_id, $entity_type_id) {
  \Drupal::database()->insert('queue')
    ->fields(['name' => 'indieweb_publish', 'data' => serialize(['source_url' => $source_url, 'target_url' => $target_url, 'entity_id' => $entity_id, 'entity_type_id' => $entity_type_id])])
    ->execute();
}

/**
 * Handles the publish queue.
 */
function indieweb_handle_publish_queue() {
  $query = 'SELECT * FROM {queue} WHERE name = :name';
  $results = \Drupal::database()->query($query, [':name' => 'indieweb_publish']);
  foreach ($results as $result) {

    $data = unserialize($result->data);
    if (!empty($data['source_url']) && !empty($data['target_url']) && !empty($data['entity_id']) && !empty($data['entity_type_id'])) {
      $sourceURL = $data['source_url'];
      $targetURL = $data['target_url'];
      $client = new MentionClient();

      try {
        $response = $client->sendWebmention($sourceURL, $targetURL);

        // Store the syndication.
        if (!empty($response) && $response['code'] == 201 && !empty($response['headers']['Location'])) {

           $values = [
             'entity_id' => $data['entity_id'],
             'entity_type_id' => $data['entity_type_id'],
             'url' => $response['headers']['Location']
           ];

          \Drupal::database()
            ->insert('webmention_syndication')
            ->fields($values)
            ->execute();

          Cache::invalidateTags([$data['entity_type_id'] . ':' . $data['entity_id']]);

        }
        else {
          \Drupal::logger('indieweb_publish')->notice('No 201 or location received when publishing for @source to @target: @response', ['@response' => print_r($response, 1), '@source' => $sourceURL, '@target' => $targetURL]);
        }

        // Log the response if configured.
        if (\Drupal::config('indieweb.publish')->get('publish_log_response')) {
          \Drupal::logger('indieweb_publish_response')->notice('response for @source to @target: @response', ['@response' => print_r($response, 1), '@source' => $sourceURL, '@target' => $targetURL]);
        }
      }
      catch (Exception $e) {
        \Drupal::logger('indieweb_publish')->notice('Error sending webmention for @source to @target: @message', ['@message' => $e->getMessage(), '@source' => $sourceURL, '@target' => $targetURL]);
      }


    }

    // Remove the item.
    \Drupal::database()->delete('queue')->condition('item_id', $result->item_id)->execute();
  }
}

/**
 * Sanitizes a url to use as a machine name.
 *
 * @param $url
 *
 * @return string
 */
function indieweb_get_machine_name_from_url($url) {
  return 'indieweb_' . str_replace(['https://', 'http://', '/', '-', '.'], '', $url);
}

/**
 * Get summary fields for microformats.
 *
 * @return array
 */
function indieweb_get_summary_fields() {
  static $fields = [];
  static $loaded = FALSE;

  if (!$loaded) {
    $loaded = TRUE;
    $fields = explode("\n", \Drupal::config('indieweb.microformats')->get('p_summary'));
  }

  return $fields;
}
