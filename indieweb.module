<?php

/**
 * @file
 * Indieweb functionality.
 */

use Drupal\comment\Entity\Comment;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\indieweb\Entity\WebmentionEntityInterface;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Adds indieweb functionality to node forms.
 */
function indieweb_form_node_form_alter(&$form, FormStateInterface $form_state) {

  // TODO configure per node type
  $node = $form_state->getFormObject()->getEntity();
  if ($node) {

    $form['indieweb'] = [
      '#type' => 'details',
      '#title' => t('Indieweb'),
      '#access' => \Drupal::currentUser()->hasPermission('send webmentions'),
      '#group' => 'advanced',
      '#weight' => 100,
    ];

    $form['indieweb']['send_to_bridgy'] = [
      '#type' => 'checkbox',
      '#title' => t('Send to brid.gy'),
      '#default_value' => FALSE,
    ];

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'indieweb_form_node_form_submit';
      }
    }
  }

}

/**
 * Form submission handler for indieweb.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @see indieweb_form_node_form_alter()
 */
function indieweb_form_node_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  if (!$form_state->isValueEmpty('send_to_bridgy') && $node->isPublished()) {
    $sourceURL = $node->toUrl()->setAbsolute(TRUE)->toString();
    // TODO use queue for real and use plugins for publishing on bridgy
    // e.g. publish_bridgy should be a plugin to publish too.
    // TODO we should probably remember that this was send already, I guess
    // we can add a field on nodes, although I'm not a big fan of it as it's
    // a pain usually to uninstall then, so maybe a dedicated table is better.
    \Drupal::database()->insert('queue')
      ->fields(['name' => 'publish_bridgy', 'data' => serialize(['url' => $sourceURL])])
      ->execute();
  }
}

/**
 * Implements hook_preprocess_node().
 */
function indieweb_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'full' || $variables['view_mode'] == 'teaser') {
    $variables['attributes']['class'][] = 'h-entry';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function indieweb_preprocess_field(&$variables) {

  // Put e-content on body.
  if ($variables['field_name'] == 'body') {
    $variables['attributes']['class'][] = 'e-content';
  }

  // In case there's a p-summary.
  if (in_array($variables['field_name'], Settings::get('indieweb_p_summary_fields', []))) {
    $variables['attributes']['class'][] = 'p-summary';
  }
}

/**
 * Implements hook_preprocess_image_style().
 *
 * @param $variables
 */
function indieweb_preprocess_image_style(&$variables) {
  $variables['image']['#attributes']['class'][] = 'u-photo';
}

/**
 * Implements hook_entity_extra_field_info().
 */
function indieweb_entity_extra_field_info() {
  $extra = [];

  foreach (NodeType::loadMultiple() as $bundle) {

    $extra['node'][$bundle->id()]['display']['indieweb_bridgy_publish_twitter'] = [
      'label' => t('Brid.gy: publish twitter'),
      'weight' => 0,
      'visible' => FALSE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function indieweb_node_view(array &$build, NodeInterface $account, EntityViewDisplayInterface $display) {
  if ($display->getComponent('indieweb_bridgy_publish_twitter')) {
    $build['indieweb_bridgy_publish_twitter'] = [
      '#markup' => '<span class="hidden"><a href="https://brid.gy/publish/twitter"></a></span>',
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function indieweb_webmention_entity_insert(WebmentionEntityInterface $webmention) {

  if (
    Settings::get('indieweb_webmention_create_comment', FALSE) &&
    !empty(Settings::get('indieweb_comment_type', '')) &&
    !empty(Settings::get('indieweb_comment_webmention_reference_field', '')) &&
    !empty(Settings::get('indieweb_node_comment_field')) &&
    $webmention->get('property')->value == 'in-reply-to' &&
    !empty($webmention->get('content_text')->value)) {

    // TODO - we have the same code in WebmentionController::clearCache to get
    // an entity make a helper function/method.
    $path = \Drupal::service('path.alias_manager')->getPathByAlias($webmention->get('target')->value);
    try {
      $params = Url::fromUri("internal:" . $path)->getRouteParameters();
      if (!empty($params) && key($params) == 'node') {
        $entity_type = key($params);

        $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
        if ($storage) {

          $comment_type = Settings::get('indieweb_comment_type', '');
          $comment_comment_webmention_field_name = Settings::get('indieweb_comment_webmention_reference_field', '');
          $comment_node_comment_field_name = Settings::get('indieweb_node_comment_field', '');

          /** @var \Drupal\node\NodeInterface $node */
          $node = $storage->load($params[$entity_type]);
          if ($node && $node->hasField($comment_node_comment_field_name) && $node->{$comment_node_comment_field_name}->status == 2) {

            $subject = 'Auto created comment from webmention';

            $values = [
              'subject' => $subject,
              'status' => Settings::get('indieweb_comment_status', 0),
              'entity_id' => $node->id(),
              'entity_type' => 'node',
              'comment_type' => $comment_type,
              'field_name' => $comment_node_comment_field_name,
              $comment_comment_webmention_field_name => [
                'target_id' => $webmention->id(),
              ]
            ];

            // Match authors if possible.
            $authors = Settings::get('indieweb_comment_authors', []);
            $author_name = $webmention->get('author_name')->value;
            $values['name'] = $author_name;
            if (isset($authors[$author_name])) {
              $values['uid'] = $authors[$author_name];
            }

            $comment = Comment::create($values);
            $comment->save();

          }
        }
      }
    }
    catch (Exception $e) {
      \Drupal::logger('indieweb')->notice('Failed to create a comment: @message', ['@message' => $e->getMessage()]);
    }
  }

}
